---
version: "3"

tasks:
  generate-age-key:
    desc: Create the Sops Age key
    cmd: age-keygen --output {{.SOPS_AGE_KEY_FILE}}
    status:
      - test -f {{.SOPS_AGE_KEY_FILE}}
    preconditions:
      - which age-keygen

  encrypt-secrets:
    desc: Encrypt secrets with Sops
    cmds:
      - for: { var: SECRET_FILES }
        cmd: |
          if [[ {{.ITEM}} =~ {{.BOOTSTRAP_DIR}}/talos ]]; then
              echo "Found in talos directory, skipping"
          else
            if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == false" &>/dev/null; then
                sops --encrypt --in-place "{{.ITEM}}"
            else
              echo "File already encrypted, skipping"
            fi
          fi
    vars:
      SECRET_FILES:
        sh: find "{{.CLUSTER_DIR}}" -type f -name "*.sops.*"
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - which sops

  encrypt-configfiles:
    desc: Encrypt secrets with Sops
    cmds:
      - for: { var: SECRET_FILES }
        cmd: |
          if [[ {{.ITEM}} =~ {{.BOOTSTRAP_DIR}}/talos ]]; then
            if ! grep -q "mac_only_encrypted: true" {{.ITEM}}; then
                sops --encrypt --in-place --input-type yaml --output-type yaml "{{.ITEM}}"
            else
              echo "File already encrypted, skipping"
            fi
          fi
    vars:
      SECRET_FILES:
        sh: find "{{.BOOTSTRAP_DIR}}/talos/" -type f -name "*.sops.*"
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - which sops