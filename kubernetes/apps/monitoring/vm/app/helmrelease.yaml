---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics
spec:
  interval: 30m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      # renovate: registryUrl=https://victoriametrics.github.io/helm-charts chart=victoria-metrics-k8s-stack
      version: 0.36.0
      sourceRef:
        kind: HelmRepository
        name: victoriametrics
        namespace: flux-system
  values:
    fullnameOverride: vmetrics

    # VM Operator deployment
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
        enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted

    serviceAccount:
      create: true
      annotations: {}

    # Single-binary vm cluster
    vmsingle:
      enabled: true
      spec:
        extraArgs:
          dedup.minScrapeInterval: 30s
          maxLabelsPerTimeseries: "90"
          search.minStalenessInterval: 5m
          vmalert.proxyURL: http://vmalert-vmetrics.monitoring.svc.cluster.local:8080
        retentionPeriod: 1y
        resources:
          requests:
            cpu: 50m
            memory: 1Gi
          limits:
            cpu: 500m
            memory: 2500Mi
        storage:
          storageClassName: "ceph-block"
          existingClaim: vm
          size: "500Gi"
          accessModes:
            - ReadWriteOnce
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmetrics.jonandlinz.io

    # VM Alerting (however, this just watches & passes alerts to alertmanager)
    vmalert:
      enabled: true
      spec:
        externalLabels:
          cluster: &clustername "k8s-home"
        replicaCount: 2
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 256Mi
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: vmalert
        extraArgs:
          external.url: https://vmalert.jonandlinz.io
        notifiers:
          - url: http://alertmanager.monitoring.svc.cluster.local:9093
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmalert.jonandlinz.io

    # VM Data scraping
    vmagent:
      enabled: true
      spec:
        externalLabels:
          cluster: *clustername
        extraArgs:
          promscrape.maxScrapeSize: "33554432" # 32MiB
          promscrape.streamParse: "true"
          # Do not store original labels in vmagent's memory by default. This reduces the amount of memory used by vmagent
          # but makes vmagent debugging UI less informative. See: https://docs.victoriametrics.com/vmagent/#relabel-debug
          promscrape.dropOriginalLabels: "true"
        replicaCount: 1
        shardCount: 2
        scrapeInterval: 30s
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        selectAllByDefault: true
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmagent.jonandlinz.io

    # Extra slack templates
    monzoTemplate:
      enabled: false

    # Scrape configs
    kubelet:
      enabled: false

    kubeApiServer:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    coreDns:
      enabled: false

    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    # Enable deployment of kube-state-metrics
    kube-state-metrics:
      enabled: false

    # Enable deployment of prometheus-node-exporter
    prometheus-node-exporter:
      enabled: false

    # Enable deployment of grafana
    defaultDashboardsEnabled: false
    grafana:
      enabled: false

    # Enable deployment of alertmanager
    alertmanager:
      enabled: false

    # Prepared sets of default rules
    # Adjust to what scraping functions you have enabled
    # i.e. if you dont have kubeapisever setup & enabled, disable
    #   the kubeApiserver rules below
    defaultRules:
      create: false
      runbookUrl: https://runbooks.prometheus-operator.dev/runbooks