---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: victoria-metrics-k8s-stack
    namespace: monitoring
  values:
    fullnameOverride: vmetrics

    # VM Operator deployment
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
        enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted

    serviceAccount:
      create: true
      annotations: {}

    # Single-binary vm cluster
    vmsingle:
      enabled: true
      spec:
        extraArgs:
          dedup.minScrapeInterval: 30s
          maxLabelsPerTimeseries: "90"
          search.minStalenessInterval: 5m
          vmalert.proxyURL: http://vmalert-vmetrics.monitoring.svc.cluster.local:8080
        retentionPeriod: 1y
        resources:
          requests:
            cpu: 50m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 3000Mi
        persistentVolume:
          enabled: true
          accessModes:
            - ReadWriteOnce
          storageClassName: "ceph-block"
          existingClaim: "vmsingle-vmetrics"
        #storage:
        #  storageClassName: "ceph-block"
        #  existingClaim: "vmsingle-vmetrics"
        #  resources:
        #    size: 500Gi
        #    accessModes:
        #      - ReadWriteOnce
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmetrics.jonandlinz.io

    # VM Alerting (however, this just watches & passes alerts to alertmanager)
    vmalert:
      enabled: true
      spec:
        externalLabels:
          cluster: &clustername "k8s-home"
        replicaCount: 2
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 256Mi
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: vmalert
        extraArgs:
          external.url: https://vmalert.jonandlinz.io
        notifiers:
          - url: http://alertmanager.monitoring.svc.cluster.local:9093
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmalert.jonandlinz.io

    # VM Data scraping
    vmagent:
      enabled: true
      spec:
        externalLabels:
          cluster: *clustername
        extraArgs:
          promscrape.maxScrapeSize: "33554432" # 32MiB
          promscrape.streamParse: "true"
          # Do not store original labels in vmagent's memory by default. This reduces the amount of memory used by vmagent
          # but makes vmagent debugging UI less informative. See: https://docs.victoriametrics.com/vmagent/#relabel-debug
          promscrape.dropOriginalLabels: "true"
        replicaCount: 1
        shardCount: 2
        scrapeInterval: 30s
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        selectAllByDefault: true
      ingress:
        enabled: true
        ingressClassName: internal
        hosts:
          - vmagent.jonandlinz.io

    # Extra slack templates
    monzoTemplate:
      enabled: false

    defaultRules:
      create: true
      runbookUrl: https://runbooks.prometheus-operator.dev/runbooks
      rules:
        etcd: false
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        vmagent: true
        vmsingle: false
        vmhealth: true
        alertmanager: true

    # Scrape configs
    kubelet:
      vmScrape:
        spec:
          # drop high cardinality label and useless metrics for cadvisor and kubelet
          metricRelabelConfigs:
          # Drop less useful container CPU metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)'
          # Drop less useful / always zero container memory metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_memory_(failures_total|mapped_file|swap)'
          # Drop less useful container process metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_(file_descriptors|tasks_state|threads_max)'
          # Drop less useful container filesystem metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)'
          # Drop less useful container blkio metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_blkio_device_usage_total'
          # Drop container spec metrics that overlap with kube-state-metrics.
          - sourceLabels: [__name__]
            action: drop
            regex: 'container_spec.*'
          # Drop cgroup metrics with no pod.
          - sourceLabels: [id, pod]
            action: drop
            regex: '.+;'
          - action: drop
            sourceLabels: [__name__]
            regex: prober_probe_duration_seconds_bucket
          # Drop high-cardinality labels.
          - action: labeldrop
            regex: (uid|id|name|pod_uid|interface)
          - action: drop
            sourceLabels: [__name__]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeControllerManager:
      enabled: true
      service:
        enabled: true
        port: 10257
        targetPort: 10257
        selector:
          component: kube-controller-manager
      vmScrape: &scrapeToken
        spec:
          jobLabel: jobLabel
          namespaceSelector:
            matchNames:
              - kube-system
          endpoints:
            - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              port: http-metrics
              scheme: https
              tlsConfig:
                insecureSkipVerify: true
                caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                serverName: kubernetes
    kubeScheduler:
      enabled: true
      service:
        enabled: true
        port: 10259
        targetPort: 10259
        selector:
          component: kube-scheduler
      vmScrape: *scrapeToken

    # Enable deployment of kube-state-metrics
    kube-state-metrics:
      enabled: false

    # Enable deployment of prometheus-node-exporter
    prometheus-node-exporter:
      enabled: false

    # Enable deployment of grafana
    defaultDashboardsEnabled: false
    grafana:
      enabled: false

    # Enable deployment of alertmanager
    alertmanager:
      enabled: false